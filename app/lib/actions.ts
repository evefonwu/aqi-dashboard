"use server";
// use server will mark all exported functions within as Server Actions, fn to run async code directly on the server (skip APIs).
// server action fns will be called when forms are submitted

import { z } from "zod"; // validate form input

// clear client-side router cache, fetch fresh data from the server
import { revalidatePath } from "next/cache";

// navigate to specified page
import { redirect } from "next/navigation";

// create a sql postgres db instance
import postgres from "postgres";
const sql = postgres(process.env.POSTGRES_URL!, { ssl: "require" });

// what the form data schema should be:
const FormSchema = z.object({
  // forget about a user for now.
  id: z.string(), // will be generated by the db
  location: z.string(),
  date: z.string(), // will be generated
});
const CreateLocation = FormSchema.omit({ id: true, date: true });
// why declare id, date at all, just to omit it?

export async function createLocation(formData: FormData) {
  // see what's captured from form:
  console.log(formData); // server side console

  // "parse, don't validate the types"
  const { location } = CreateLocation.parse({
    location: formData.get("location"),
  });
  const zipcode = "10001"; // stub, extract from location input?
  // add a creation date with the format "YYYY-MM-DD"
  const date = new Date().toISOString().split("T")[0];

  // ensure locations table has been created in database
  try {
    await sql`
        INSERT INTO locations (location, zipcode, date)
        VALUES (${location}, ${zipcode}, ${date})
      `;
  } catch (error) {
    console.error(error);
  }

  // /revalidate (get fresh data) and navigate to specified page
  revalidatePath("/locations");
  redirect("/locations");
}
